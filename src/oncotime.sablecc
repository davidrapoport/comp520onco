Package oncotime;

Helpers
	a = ['a' + 'A'];
	b = ['b' + 'B'];
	c = ['c' + 'C'];
	d = ['d' + 'D'];
	e = ['e' + 'E'];
	f = ['f' + 'F'];
	g = ['g' + 'G'];
	h = ['h' + 'H'];
	i = ['i' + 'I'];
	j = ['j' + 'J'];
	k = ['k' + 'K'];
	l = ['l' + 'L'];
	m = ['m' + 'M'];
	n = ['n' + 'N'];
	o = ['o' + 'O'];
	p = ['p' + 'P'];
	q = ['q' + 'Q'];
	r = ['r' + 'R'];
	s = ['s' + 'S'];
	t = ['t' + 'T'];
	u = ['u' + 'U'];
	v = ['v' + 'V'];
	w = ['w' + 'W'];
	x = ['x' + 'X'];
	y = ['y' + 'Y'];
	z = ['z' + 'Z'];

	space_key = ' ';
	punc = '.' | '!' | '?' | '_' ;
	left_angle = '<';
	right_angle = '>';
	lower_letter  = ['a'..'z'];
	upper_letter = ['A'..'Z'];
	upper_or_lower = upper_letter | lower_letter;
	letter = lower_letter | upper_letter | punc;
	cr = 13;
	lf = 10;
	tab = 9;
	eol = cr | lf;
	whitespace = 13 | 10 | 9 | ' ';
	not_eol = [[0..0xff] - [cr + lf]];
	all = [0..0xff];
	comment_text = [all - ['*' + '/']];
	letter_or_whitespace = letter | whitespace;

	non_zero_digit = ['1'..'9'];
	zero = '0';
	digit = zero | non_zero_digit;
  	digits = digit+;

  	/* Found in reference compiler grammar */
  	male = 'male' | 'm' | 'Male' | 'M' ; 
  	female = 'female' | 'f' | 'Female' | 'F';
	
	open_multiline = '/*';
	close_multiline = '*/';

Tokens
	comma = ',';
	colon = ':';
	assign = '=';
	use_keyword = u s e;
	group_keyword = g r o u p;
	script_keyword = s c r i p t;
	to = 'to';
	multiline_comment = open_multiline ('*' comment_text* eol?)* close_multiline;
	comment = '//'  not_eol*  eol;

	open_paren = '(';
	close_paren = ')';

	open_bracket = '{';
	close_bracket = '}';

	star = '*';
	dot = '.';

	//Computation keywords
	t_print = p r i n t;
	t_table = t a b l e;
	t_count = c o u n t;
	by = b y;
	t_foreach = f o r e a c h;
	t_not = n o t;
	in = i n;
	t_list = l i s t;
	t_sequences = s e q u e n c e s?;
	t_member = m e m b e r;
	arrow = '->';
	bar = '|';
	open_square = '[';
	close_square = ']';
	t_timeline = t i m e l i n e;
	of = o f;
	t_barchart = b a r c h a r t;
	t_length = '.' l e n g t h;
	t_element = e l e m e n t;
	t_native = n a t i v e;
	t_like = l i k e;


/* Filter Tokens */

/* Filter keywords */
    event_filter_header = (e v e n t s whitespace+ a r e) | (e v e n t whitespace+ i s);
	population = p o p u l a t i o n;
	period = p e r i o d;
	event = e v e n t s?;
	doctor = d o c t o r s?;
	is = i s;
	are = a r e;

/* Population */
	id = i d;
	gender = s e x;
	birthyear = b i r t h y e a r;
	diagnosis = d i a g n o s i s;
	postalcode = p o s t a l c o d e;
	either_gender = male | female;

/* Period */
	years = y e a r s?;
	months = m o n t h s;
	days =  d a y s?;
	hours = h o u r s?;
	start = s t a r t;
	end = e n d;

/* Other Types */
	patient = p a t i e n t s?;
	date = d a t e s;


	t_postalcode = upper_or_lower digit upper_or_lower digit upper_or_lower digit | 
	  				upper_or_lower digit upper_or_lower;
	identifier_expansion = '<' whitespace* (upper_or_lower (digit | letter)*) whitespace* '>';
	group_file = upper_or_lower (digit | letter)* '.grp';
	identifier = upper_or_lower (letter | digit)*;
	quoted_string = '"' letter_or_whitespace+ '"';
	
	space = space_key;
	blank = (tab);
	eol = eol;
	newline   = cr | lf | cr lf;
	integer_literal = digits;

Ignored Tokens
	space, blank, comment, eol;

Productions
	program {-> grammar} = {script} [header]:header use_clauses* groups_definitions* 
	                        filters* open_bracket computation* close_bracket 
	                      		{-> New grammar.script(header.header, [use_clauses.use], [groups_definitions.group], 
	                       			[filters.filters], [computation.computation])} | 
	          		       {group_file} multiline_comment groups_definitions* 
	                   			{-> New grammar.group_file(multiline_comment, [groups_definitions.group])};

	header{-> header} = script_keyword [name]:identifier open_paren [prms]:param_list? close_paren [comment]:multiline_comment
	                    {-> New header(name, [prms.identifier], comment)};

	param_list {-> identifier* } = {multiple} [arg]:identifier comma [rest]:param_list 
	                                   {-> [arg, rest.identifier] } |
	                               {single} [arg]:identifier 
	                                   {-> [arg]};

	use_clauses{-> use} = use_keyword use_files_list 
	                          {-> New use([use_files_list.group_file])};

	use_files_list{-> group_file*} = {single} group_file 
	                                    {-> [group_file]}|
	                                 {multiple} [first]:group_file comma [rest]:use_files_list  
	                                    {-> [first, rest.group_file]};

	groups_definitions{-> group } = group_keyword filter_type identifier assign open_bracket value_list? close_bracket
	                                    {-> New group(filter_type.filter_type, identifier, [value_list.value])};

	filters{-> filters} = {pop_filter} pop_filter 
	                          {-> New filters.pop_filter(pop_filter)}|
	                      {period_filter} period_filter 
	                          {-> New filters.period_filter(period_filter)}|
	                      {event_filter} event_filter 
	                          {-> New filters.event_filter(event_filter)}|
	                      {doctor_filter} doctor_filter 
	                          {-> New filters.doctor_filter(doctor_filter)};


	filter_type = {population_type} population_type| 
	              {period_type} period_type |
	              {doctor_type} doctor_type |
	              {event_type} event_type ;


	filter_type_list{-> filter_type*} = {multiple} [f]:filter_type comma filter_type_list 
	                                        {-> [f.filter_type, filter_type_list.filter_type]}
	                                   | {single} [f]:filter_type 
	                                        {-> [f.filter_type]};

	population_type  =  {patientid} id |
					    {gender} gender |
						{birthyear} birthyear |
						{diagnosis} diagnosis | 
						{postalcode} postalcode ; 

	period_type = {years} years |
	             {months} months |
	              {days} days |
	              {hours} hours |
	              {start} start |
	              {end} end ;

	doctor_type = {doctor} doctor;
	event_type = {event} event ;

	pop_filter{-> pop_filter } = population is pop_field+ {-> New pop_filter([pop_field.pop_field])};
	pop_field{-> pop_field } = population_type colon value_list {-> New pop_field(population_type, [value_list.value])};

	period_filter{-> period_filter } = period is period_field+ {-> New period_filter([period_field.period_field])};
	period_field{-> period_field } = period_type colon value_list {-> New period_field(period_type, [value_list.value])};

	doctor_filter{-> doctor_filter } = doctor are doctor_field+ {-> New doctor_filter([doctor_field.doctor_field])};
	doctor_field{-> doctor_field } = id colon value_list {-> New doctor_field(id, [value_list.value])};

	event_filter{-> event_filter } = event_filter_header event_field {-> New event_filter([event_field.event_field])};
	event_field{-> event_field }  = event_type colon value_list {-> New event_field(event_type, [value_list.value])};


	value_list{-> value* } = {single} value {-> [value.value]}|
	             {multiple} value comma value_list {-> [value.value, value_list.value]};

	value{-> value} =  {primitive} primitive_value {-> primitive_value.value}|
			 {identifier_expansion} identifier_expansion {-> New value.identifier_expansion(identifier_expansion)}|
			 {wildcard_val} star {-> New value.wildcard_val(star)}| 
	         {range_val} [start]:primitive_value to [end]:primitive_value {-> New value.range_val(start.value, end.value)};
	
	primitive_value{-> value} = {string_val} identifier {-> New value.identifier(identifier)}|
	         {quoted_string_val} quoted_string {-> New value.quoted_string(quoted_string)}|
	         {number_val} integer_literal {-> New value.integer(integer_literal)}|
	         {gender_val} either_gender {-> New value.gender(either_gender)}|
	         {postalcode_val} t_postalcode{-> New value.postal_code(t_postalcode)};

	identifier_or_expansion = {identifier} identifier | 
	                          {expansion} identifier_expansion ;

	identifier_list{-> identifier_or_expansion*} = {idnt_sngl} [i]:identifier_or_expansion {-> [i.identifier_or_expansion]}| {idnt_exp_mltp} [s]:identifier_or_expansion comma [rest]:identifier_list 
	                 {-> [s.identifier_or_expansion, rest.identifier_or_expansion]};


	actor   = {doctor} doctor | 
	          {patient} patient | 
	          {diagnosis} diagnosis ;

	computation{-> computation} = {foreach_single} t_foreach foreach_clause computation 
	                                  {-> New computation.foreach(foreach_clause.foreach_clause, [computation.computation])}|
				  {foreach_multi}  t_foreach foreach_clause open_bracket computation+ close_bracket 
				                     {-> New computation.foreach(foreach_clause.foreach_clause, [computation.computation])}|
				  {print} t_print print_value 
				                     {-> New computation.print(print_value.print)}|
				  {table} t_table identifier assign table 
				                     {-> New computation.table(identifier, table.table)}|
				  {barchart} t_barchart identifier 
				                     {-> New computation.barchart(identifier)}|
				  {list_def} t_list identifier assign t_sequences t_like sequence_def
				                     {-> New computation.list_def(identifier, sequence_def.sequence_stmt)};
			  

	foreach_clause{-> foreach_clause} = {by_type} actor identifier {-> New foreach_clause.by_type(actor.actor, identifier)}| 
	                 {member} t_member [variable]:identifier in [sequence]:identifier {-> New foreach_clause.member(variable, sequence)}|
	                 {element} t_element [variable]:identifier of [table]:identifier {-> New foreach_clause.element(variable, table)}|
	                 {sequence_in_list} t_sequences identifier t_like sequence_def {-> New foreach_clause.sequence_in_list(identifier, sequence_def.sequence_stmt)};
	                 

	print_value{-> print} = {value} identifier  {-> New print.value(identifier)}| 
	              {attributes} [types]:filter_type_list of [i]:identifier {-> New print.attributes([types.filter_type], i)}|
	              {timeline} t_timeline of identifier {-> New print.timeline(identifier)}|
	              {index} [variable]:identifier open_square [index_v]:value close_square  {-> New print.index(variable,index_v.value)}|
	              {table_val} table {-> New print.table(table.table)}|
	              {length} identifier dot t_length {-> New print.length(identifier)};

	table{-> table} = {count} t_count actor by filter_type
	                       {-> New table.count(actor.actor, filter_type.filter_type)}|
	                  {native} t_native open_paren param_list close_paren
	                       {-> New table.native([param_list.identifier])};

	sequence_def{-> sequence_stmt} = {sequence} open_square sequence_stmt close_square 
	                                     {-> sequence_stmt.sequence_stmt}|
	                                  {empty} open_square close_square {-> New sequence_stmt.empty()  };

	sequence_stmt{-> sequence_stmt} = {single} sequence_unit 
	                                       {-> New sequence_stmt.single(sequence_unit.sequence_unit)}| 
	                                   {bar} sequence_unit bar sequence_stmt 
	                                       {-> New sequence_stmt.bar(sequence_unit.sequence_unit, sequence_stmt.sequence_stmt)}|
	                                   {arrow} sequence_unit arrow sequence_stmt
	                                       {-> New sequence_stmt.arrow(sequence_unit.sequence_unit, sequence_stmt.sequence_stmt)};

	sequence_unit{-> sequence_unit} = {idnt} identifier_or_expansion 
	                                     {-> New sequence_unit.idnt([identifier_or_expansion])}| 
	                                  {list} open_bracket identifier_list close_bracket 
	                                     {-> New sequence_unit.idnt([identifier_list.identifier_or_expansion])}|
	                                  {negation} open_paren t_not identifier_list close_paren 
	                                      {-> New sequence_unit.negation([identifier_list.identifier_or_expansion])}|
	                                  {end} end 
	                                      {-> New sequence_unit.end(end)}|
	                                  {start} start
	                                      {-> New sequence_unit.start(start)};


Abstract Syntax Tree

grammar = {script} [header]:header [uses]:use* [groups]:group* [filter]:filters* [computations]:computation* | 
		  {group_file} [comment]:multiline_comment [groups]:group*;

header = [name]:identifier [params]:identifier* multiline_comment;

use = [files]:group_file*;

group = [type]:filter_type [name]:identifier [values]:value*;

filters = {pop_filter} pop_filter | {period_filter} period_filter 
		| {event_filter} event_filter | {doctor_filter} doctor_filter;

pop_filter = pop_field+;
pop_field = population_type value*;

period_filter = period_field+;
period_field = period_type value*;

doctor_filter = doctor_field+;
doctor_field = id value*;

event_filter = event_field+;
event_field = event_type value*;

filter_type = {population_type} population_type | 
              {period_type} period_type |
              {doctor_type} doctor_type |
              {event_type} event_type ;

population_type =  {patientid} id | {gender} gender | 
	{birthyear} birthyear |
	{diagnosis} diagnosis  |
	{postalcode} postalcode ;

period_type = {years} years |{months} months |{days} days |
              {hours} hours |{start} start |{end} end ;
doctor_type = {doctor} doctor;
event_type = {event} event;


value =  {identifier_expansion} identifier_expansion |
		 {wildcard_val} star | 
         {range_val} [start]:value [end]:value |
         {identifier} identifier |
         {integer} integer_literal|
         {quoted_string} quoted_string|
         {postal_code} t_postalcode|
         {gender} either_gender;

identifier_or_expansion = {identifier} identifier | {expansion} identifier_expansion ;

actor = {doctor} doctor | {patient} patient | {diagnosis} diagnosis ;

computation = {foreach}  [clause]:foreach_clause [computations]:computation* |
			  {print} [value]:print |
			  {table} [name]:identifier [value]:table|
			  {barchart} [name]:identifier |
			  {list_def}  [name]:identifier [value]:sequence_stmt;
			  

foreach_clause = {by_type} [type]:actor [var]:identifier | 
                 {member} [variable]:identifier [sequence]:identifier|
                 {element} [variable]:identifier [table]:identifier|
                 {sequence_in_list} [name]:identifier [value]:sequence_stmt;
                 

print       = {value} [name]:identifier | {attributes} [types]:filter_type* [value]:identifier|
              {timeline} [timeline]:identifier|
              {index} [variable]:identifier [index_v]:value |
              {table} [value]:table|
              {length} [name]:identifier;

table       = {count} [type]:actor [count_type]:filter_type|
              {native} [params]:identifier* ;

sequence_stmt = {bar} [left]:sequence_unit [right]:sequence_stmt |
                {arrow} [left]:sequence_unit [right]:sequence_stmt|
                {single} sequence_unit|
                {empty};

sequence_unit = {idnt} identifier_or_expansion+ |
                {negation}  identifier_or_expansion+ |
                {end} end |
                {start} start;